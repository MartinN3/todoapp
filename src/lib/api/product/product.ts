/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * DummyJSON API
 * DummyJSON API
 * OpenAPI spec version: 0.0.5
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type { GetProductsCategoryCategoryNameParams } from '../../../model/getProductsCategoryCategoryNameParams';
import type { GetProductsParams } from '../../../model/getProductsParams';
import type { GetProductsProductIdParams } from '../../../model/getProductsProductIdParams';
import type { GetProductsSearchParams } from '../../../model/getProductsSearchParams';
import type { Product } from '../../../model/product';
import type { ProductDelete } from '../../../model/productDelete';
import type { Products } from '../../../model/products';

/**
 * @summary get all products
 */
export const getProducts = (
  params?: GetProductsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Products>> => {
  return axios.default.get(`https://dummyjson.com/products`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetProductsQueryKey = (params?: GetProductsParams) => {
  return [
    `https://dummyjson.com/products`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetProductsQueryOptions = <
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = AxiosError<void>,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProductsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProducts>>> = ({
    signal,
  }) => getProducts(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProducts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProductsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProducts>>
>;
export type GetProductsQueryError = AxiosError<void>;

/**
 * @summary get all products
 */
export const useGetProducts = <
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = AxiosError<void>,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary search products
 */
export const getProductsSearch = (
  params?: GetProductsSearchParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Products>> => {
  return axios.default.get(`https://dummyjson.com/products/search`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetProductsSearchQueryKey = (
  params?: GetProductsSearchParams,
) => {
  return [
    `https://dummyjson.com/products/search`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetProductsSearchQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductsSearch>>,
  TError = AxiosError<void>,
>(
  params?: GetProductsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsSearch>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetProductsSearchQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductsSearch>>
  > = ({ signal }) => getProductsSearch(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductsSearch>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProductsSearchQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductsSearch>>
>;
export type GetProductsSearchQueryError = AxiosError<void>;

/**
 * @summary search products
 */
export const useGetProductsSearch = <
  TData = Awaited<ReturnType<typeof getProductsSearch>>,
  TError = AxiosError<void>,
>(
  params?: GetProductsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsSearch>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductsSearchQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary get all products categories
 */
export const getProductsCategories = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string[]>> => {
  return axios.default.get(
    `https://dummyjson.com/products/categories`,
    options,
  );
};

export const getGetProductsCategoriesQueryKey = () => {
  return [`https://dummyjson.com/products/categories`] as const;
};

export const getGetProductsCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductsCategories>>,
  TError = AxiosError<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getProductsCategories>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProductsCategoriesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductsCategories>>
  > = ({ signal }) => getProductsCategories({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductsCategories>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProductsCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductsCategories>>
>;
export type GetProductsCategoriesQueryError = AxiosError<void>;

/**
 * @summary get all products categories
 */
export const useGetProductsCategories = <
  TData = Awaited<ReturnType<typeof getProductsCategories>>,
  TError = AxiosError<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getProductsCategories>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductsCategoriesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary update a product
 */
export const putProductsProductId = (
  productId: number,
  product: Product,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Product>> => {
  return axios.default.put(
    `https://dummyjson.com/products/${productId}`,
    product,
    options,
  );
};

export const getPutProductsProductIdMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProductsProductId>>,
    TError,
    { productId: number; data: Product },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putProductsProductId>>,
  TError,
  { productId: number; data: Product },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putProductsProductId>>,
    { productId: number; data: Product }
  > = (props) => {
    const { productId, data } = props ?? {};

    return putProductsProductId(productId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutProductsProductIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putProductsProductId>>
>;
export type PutProductsProductIdMutationBody = Product;
export type PutProductsProductIdMutationError = AxiosError<void>;

/**
 * @summary update a product
 */
export const usePutProductsProductId = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProductsProductId>>,
    TError,
    { productId: number; data: Product },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPutProductsProductIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary update a product
 */
export const patchProductsProductId = (
  productId: number,
  product: Product,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Product>> => {
  return axios.default.patch(
    `https://dummyjson.com/products/${productId}`,
    product,
    options,
  );
};

export const getPatchProductsProductIdMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchProductsProductId>>,
    TError,
    { productId: number; data: Product },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchProductsProductId>>,
  TError,
  { productId: number; data: Product },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchProductsProductId>>,
    { productId: number; data: Product }
  > = (props) => {
    const { productId, data } = props ?? {};

    return patchProductsProductId(productId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchProductsProductIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchProductsProductId>>
>;
export type PatchProductsProductIdMutationBody = Product;
export type PatchProductsProductIdMutationError = AxiosError<void>;

/**
 * @summary update a product
 */
export const usePatchProductsProductId = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchProductsProductId>>,
    TError,
    { productId: number; data: Product },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPatchProductsProductIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary delete a product
 */
export const deleteProductsProductId = (
  productId: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ProductDelete>> => {
  return axios.default.delete(
    `https://dummyjson.com/products/${productId}`,
    options,
  );
};

export const getDeleteProductsProductIdMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProductsProductId>>,
    TError,
    { productId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteProductsProductId>>,
  TError,
  { productId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteProductsProductId>>,
    { productId: number }
  > = (props) => {
    const { productId } = props ?? {};

    return deleteProductsProductId(productId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteProductsProductIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteProductsProductId>>
>;

export type DeleteProductsProductIdMutationError = AxiosError<void>;

/**
 * @summary delete a product
 */
export const useDeleteProductsProductId = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProductsProductId>>,
    TError,
    { productId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getDeleteProductsProductIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary get product by id
 */
export const getProductsProductId = (
  productId: number,
  params?: GetProductsProductIdParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Product>> => {
  return axios.default.get(`https://dummyjson.com/products/${productId}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetProductsProductIdQueryKey = (
  productId: number,
  params?: GetProductsProductIdParams,
) => {
  return [
    `https://dummyjson.com/products/${productId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetProductsProductIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductsProductId>>,
  TError = AxiosError<void>,
>(
  productId: number,
  params?: GetProductsProductIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsProductId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetProductsProductIdQueryKey(productId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductsProductId>>
  > = ({ signal }) =>
    getProductsProductId(productId, params, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!productId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductsProductId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProductsProductIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductsProductId>>
>;
export type GetProductsProductIdQueryError = AxiosError<void>;

/**
 * @summary get product by id
 */
export const useGetProductsProductId = <
  TData = Awaited<ReturnType<typeof getProductsProductId>>,
  TError = AxiosError<void>,
>(
  productId: number,
  params?: GetProductsProductIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsProductId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductsProductIdQueryOptions(
    productId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary get products of category
 */
export const getProductsCategoryCategoryName = (
  categoryName: string,
  params?: GetProductsCategoryCategoryNameParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Products>> => {
  return axios.default.get(
    `https://dummyjson.com/products/category/${categoryName}`,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getGetProductsCategoryCategoryNameQueryKey = (
  categoryName: string,
  params?: GetProductsCategoryCategoryNameParams,
) => {
  return [
    `https://dummyjson.com/products/category/${categoryName}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetProductsCategoryCategoryNameQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductsCategoryCategoryName>>,
  TError = AxiosError<void>,
>(
  categoryName: string,
  params?: GetProductsCategoryCategoryNameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsCategoryCategoryName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetProductsCategoryCategoryNameQueryKey(categoryName, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductsCategoryCategoryName>>
  > = ({ signal }) =>
    getProductsCategoryCategoryName(categoryName, params, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!categoryName,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductsCategoryCategoryName>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProductsCategoryCategoryNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductsCategoryCategoryName>>
>;
export type GetProductsCategoryCategoryNameQueryError = AxiosError<void>;

/**
 * @summary get products of category
 */
export const useGetProductsCategoryCategoryName = <
  TData = Awaited<ReturnType<typeof getProductsCategoryCategoryName>>,
  TError = AxiosError<void>,
>(
  categoryName: string,
  params?: GetProductsCategoryCategoryNameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsCategoryCategoryName>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductsCategoryCategoryNameQueryOptions(
    categoryName,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary create a new product
 */
export const postProductsAdd = (
  product: Product,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Product>> => {
  return axios.default.post(
    `https://dummyjson.com/products/add`,
    product,
    options,
  );
};

export const getPostProductsAddMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProductsAdd>>,
    TError,
    { data: Product },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postProductsAdd>>,
  TError,
  { data: Product },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postProductsAdd>>,
    { data: Product }
  > = (props) => {
    const { data } = props ?? {};

    return postProductsAdd(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostProductsAddMutationResult = NonNullable<
  Awaited<ReturnType<typeof postProductsAdd>>
>;
export type PostProductsAddMutationBody = Product;
export type PostProductsAddMutationError = AxiosError<void>;

/**
 * @summary create a new product
 */
export const usePostProductsAdd = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProductsAdd>>,
    TError,
    { data: Product },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPostProductsAddMutationOptions(options);

  return useMutation(mutationOptions);
};
