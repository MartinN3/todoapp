/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * DummyJSON API
 * DummyJSON API
 * OpenAPI spec version: 0.0.5
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type { GetProductsCategoryCategoryNameParams } from '../../../model/getProductsCategoryCategoryNameParams';
import type { GetProductsParams } from '../../../model/getProductsParams';
import type { GetProductsProductIdParams } from '../../../model/getProductsProductIdParams';
import type { GetProductsSearchParams } from '../../../model/getProductsSearchParams';
import type { Product } from '../../../model/product';
import type { ProductDelete } from '../../../model/productDelete';
import type { Products } from '../../../model/products';
import { customAxiosInstance } from '../../customAxiosInstance';
import type { ErrorType } from '../../customAxiosInstance';

/**
 * @summary get all products
 */
export const getProducts = (
  params?: GetProductsParams,
  signal?: AbortSignal,
) => {
  return customAxiosInstance<Products>({
    url: `/products`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetProductsQueryKey = (params?: GetProductsParams) => {
  return [`/products`, ...(params ? [params] : [])] as const;
};

export const getGetProductsQueryOptions = <
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ErrorType<void>,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProductsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProducts>>> = ({
    signal,
  }) => getProducts(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProducts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProductsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProducts>>
>;
export type GetProductsQueryError = ErrorType<void>;

/**
 * @summary get all products
 */
export const useGetProducts = <
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ErrorType<void>,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary search products
 */
export const getProductsSearch = (
  params?: GetProductsSearchParams,
  signal?: AbortSignal,
) => {
  return customAxiosInstance<Products>({
    url: `/products/search`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetProductsSearchQueryKey = (
  params?: GetProductsSearchParams,
) => {
  return [`/products/search`, ...(params ? [params] : [])] as const;
};

export const getGetProductsSearchQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductsSearch>>,
  TError = ErrorType<void>,
>(
  params?: GetProductsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsSearch>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetProductsSearchQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductsSearch>>
  > = ({ signal }) => getProductsSearch(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductsSearch>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProductsSearchQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductsSearch>>
>;
export type GetProductsSearchQueryError = ErrorType<void>;

/**
 * @summary search products
 */
export const useGetProductsSearch = <
  TData = Awaited<ReturnType<typeof getProductsSearch>>,
  TError = ErrorType<void>,
>(
  params?: GetProductsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsSearch>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductsSearchQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary get all products categories
 */
export const getProductsCategories = (signal?: AbortSignal) => {
  return customAxiosInstance<string[]>({
    url: `/products/categories`,
    method: 'GET',
    signal,
  });
};

export const getGetProductsCategoriesQueryKey = () => {
  return [`/products/categories`] as const;
};

export const getGetProductsCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductsCategories>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getProductsCategories>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProductsCategoriesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductsCategories>>
  > = ({ signal }) => getProductsCategories(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductsCategories>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProductsCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductsCategories>>
>;
export type GetProductsCategoriesQueryError = ErrorType<void>;

/**
 * @summary get all products categories
 */
export const useGetProductsCategories = <
  TData = Awaited<ReturnType<typeof getProductsCategories>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getProductsCategories>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductsCategoriesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary update a product
 */
export const putProductsProductId = (productId: number, product: Product) => {
  return customAxiosInstance<Product>({
    url: `/products/${productId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: product,
  });
};

export const getPutProductsProductIdMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProductsProductId>>,
    TError,
    { productId: number; data: Product },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putProductsProductId>>,
  TError,
  { productId: number; data: Product },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putProductsProductId>>,
    { productId: number; data: Product }
  > = (props) => {
    const { productId, data } = props ?? {};

    return putProductsProductId(productId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutProductsProductIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putProductsProductId>>
>;
export type PutProductsProductIdMutationBody = Product;
export type PutProductsProductIdMutationError = ErrorType<void>;

/**
 * @summary update a product
 */
export const usePutProductsProductId = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putProductsProductId>>,
    TError,
    { productId: number; data: Product },
    TContext
  >;
}) => {
  const mutationOptions = getPutProductsProductIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary update a product
 */
export const patchProductsProductId = (productId: number, product: Product) => {
  return customAxiosInstance<Product>({
    url: `/products/${productId}`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: product,
  });
};

export const getPatchProductsProductIdMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchProductsProductId>>,
    TError,
    { productId: number; data: Product },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchProductsProductId>>,
  TError,
  { productId: number; data: Product },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchProductsProductId>>,
    { productId: number; data: Product }
  > = (props) => {
    const { productId, data } = props ?? {};

    return patchProductsProductId(productId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchProductsProductIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchProductsProductId>>
>;
export type PatchProductsProductIdMutationBody = Product;
export type PatchProductsProductIdMutationError = ErrorType<void>;

/**
 * @summary update a product
 */
export const usePatchProductsProductId = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchProductsProductId>>,
    TError,
    { productId: number; data: Product },
    TContext
  >;
}) => {
  const mutationOptions = getPatchProductsProductIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary delete a product
 */
export const deleteProductsProductId = (productId: number) => {
  return customAxiosInstance<ProductDelete>({
    url: `/products/${productId}`,
    method: 'DELETE',
  });
};

export const getDeleteProductsProductIdMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProductsProductId>>,
    TError,
    { productId: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteProductsProductId>>,
  TError,
  { productId: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteProductsProductId>>,
    { productId: number }
  > = (props) => {
    const { productId } = props ?? {};

    return deleteProductsProductId(productId);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteProductsProductIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteProductsProductId>>
>;

export type DeleteProductsProductIdMutationError = ErrorType<void>;

/**
 * @summary delete a product
 */
export const useDeleteProductsProductId = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProductsProductId>>,
    TError,
    { productId: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteProductsProductIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary get product by id
 */
export const getProductsProductId = (
  productId: number,
  params?: GetProductsProductIdParams,
  signal?: AbortSignal,
) => {
  return customAxiosInstance<Product>({
    url: `/products/${productId}`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetProductsProductIdQueryKey = (
  productId: number,
  params?: GetProductsProductIdParams,
) => {
  return [`/products/${productId}`, ...(params ? [params] : [])] as const;
};

export const getGetProductsProductIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductsProductId>>,
  TError = ErrorType<void>,
>(
  productId: number,
  params?: GetProductsProductIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsProductId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetProductsProductIdQueryKey(productId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductsProductId>>
  > = ({ signal }) => getProductsProductId(productId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!productId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductsProductId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProductsProductIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductsProductId>>
>;
export type GetProductsProductIdQueryError = ErrorType<void>;

/**
 * @summary get product by id
 */
export const useGetProductsProductId = <
  TData = Awaited<ReturnType<typeof getProductsProductId>>,
  TError = ErrorType<void>,
>(
  productId: number,
  params?: GetProductsProductIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsProductId>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductsProductIdQueryOptions(
    productId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary get products of category
 */
export const getProductsCategoryCategoryName = (
  categoryName: string,
  params?: GetProductsCategoryCategoryNameParams,
  signal?: AbortSignal,
) => {
  return customAxiosInstance<Products>({
    url: `/products/category/${categoryName}`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetProductsCategoryCategoryNameQueryKey = (
  categoryName: string,
  params?: GetProductsCategoryCategoryNameParams,
) => {
  return [
    `/products/category/${categoryName}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetProductsCategoryCategoryNameQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductsCategoryCategoryName>>,
  TError = ErrorType<void>,
>(
  categoryName: string,
  params?: GetProductsCategoryCategoryNameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsCategoryCategoryName>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetProductsCategoryCategoryNameQueryKey(categoryName, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductsCategoryCategoryName>>
  > = ({ signal }) =>
    getProductsCategoryCategoryName(categoryName, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!categoryName,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductsCategoryCategoryName>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProductsCategoryCategoryNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductsCategoryCategoryName>>
>;
export type GetProductsCategoryCategoryNameQueryError = ErrorType<void>;

/**
 * @summary get products of category
 */
export const useGetProductsCategoryCategoryName = <
  TData = Awaited<ReturnType<typeof getProductsCategoryCategoryName>>,
  TError = ErrorType<void>,
>(
  categoryName: string,
  params?: GetProductsCategoryCategoryNameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsCategoryCategoryName>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProductsCategoryCategoryNameQueryOptions(
    categoryName,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary create a new product
 */
export const postProductsAdd = (product: Product) => {
  return customAxiosInstance<Product>({
    url: `/products/add`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: product,
  });
};

export const getPostProductsAddMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProductsAdd>>,
    TError,
    { data: Product },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postProductsAdd>>,
  TError,
  { data: Product },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postProductsAdd>>,
    { data: Product }
  > = (props) => {
    const { data } = props ?? {};

    return postProductsAdd(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostProductsAddMutationResult = NonNullable<
  Awaited<ReturnType<typeof postProductsAdd>>
>;
export type PostProductsAddMutationBody = Product;
export type PostProductsAddMutationError = ErrorType<void>;

/**
 * @summary create a new product
 */
export const usePostProductsAdd = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProductsAdd>>,
    TError,
    { data: Product },
    TContext
  >;
}) => {
  const mutationOptions = getPostProductsAddMutationOptions(options);

  return useMutation(mutationOptions);
};
