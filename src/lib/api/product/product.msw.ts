/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * DummyJSON API
 * DummyJSON API
 * OpenAPI spec version: 0.0.5
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';

export const getGetProductsMock = () => ({
  limit: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  products: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      brand: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      category: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      discountPercentage: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      images: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      price: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      rating: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      stock: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      thumbnail: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  skip: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  total: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
});

export const getGetProductsSearchMock = () => ({
  limit: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  products: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      brand: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      category: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      discountPercentage: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      images: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      price: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      rating: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      stock: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      thumbnail: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  skip: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  total: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
});

export const getGetProductsCategoriesMock = () =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, () =>
    faker.word.sample(),
  );

export const getPutProductsProductIdMock = () => ({
  brand: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  category: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  discountPercentage: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  images: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  price: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  rating: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  stock: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  thumbnail: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
});

export const getPatchProductsProductIdMock = () => ({
  brand: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  category: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  discountPercentage: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  images: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  price: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  rating: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  stock: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  thumbnail: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
});

export const getDeleteProductsProductIdMock = () => ({
  brand: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  category: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  discountPercentage: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  images: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  price: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  rating: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  stock: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  thumbnail: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  deletedOn: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  isDeleted: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
});

export const getGetProductsProductIdMock = () => ({
  brand: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  category: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  discountPercentage: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  images: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  price: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  rating: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  stock: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  thumbnail: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
});

export const getGetProductsCategoryCategoryNameMock = () => ({
  limit: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  products: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      brand: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      category: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      discountPercentage: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      images: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.word.sample()),
        undefined,
      ]),
      price: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      rating: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      stock: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      thumbnail: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
  skip: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  total: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
});

export const getPostProductsAddMock = () => ({
  brand: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  category: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  discountPercentage: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  images: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  price: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  rating: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  stock: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  thumbnail: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
});

export const getProductMock = () => [
  http.get('*/products', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getGetProductsMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
  http.get('*/products/search', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getGetProductsSearchMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
  http.get('*/products/categories', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getGetProductsCategoriesMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
  http.put('*/products/:productId', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getPutProductsProductIdMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
  http.patch('*/products/:productId', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getPatchProductsProductIdMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
  http.delete('*/products/:productId', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getDeleteProductsProductIdMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
  http.get('*/products/:productId', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getGetProductsProductIdMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
  http.get('*/products/category/:categoryName', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(getGetProductsCategoryCategoryNameMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  }),
  http.post('*/products/add', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(getPostProductsAddMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }),
];
